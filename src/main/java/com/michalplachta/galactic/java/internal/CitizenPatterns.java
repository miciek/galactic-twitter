package com.michalplachta.galactic.java.internal;

import com.michalplachta.galactic.java.values.*;
import javaslang.API;
import javaslang.Tuple;
import javaslang.Tuple1;
import javaslang.Tuple2;

// NOTE: Some patterns can also be autogenerated using javaslang-match
public class CitizenPatterns {
    public static Tuple1<String> Civil(Civil civil) {
        return Tuple.of(civil.name);
    }

    public static <_1 extends String> API.Match.Pattern1<? extends Citizen, _1> Civil(API.Match.Pattern<_1, ?> p1) {
        return API.Match.Pattern1.of(Civil.class, p1, CitizenPatterns::Civil);
    }

    public static Tuple1<String> Jedi(Jedi jedi) {
        return Tuple.of(jedi.name);
    }

    public static <_1 extends String> API.Match.Pattern1<? extends Citizen, _1> Jedi(API.Match.Pattern<_1, ?> p1) {
        return API.Match.Pattern1.of(Jedi.class, p1, CitizenPatterns::Jedi);
    }

    public static Tuple1<String> Rebel(Rebel rebel) {
        return Tuple.of(rebel.name);
    }

    public static <_1 extends String> API.Match.Pattern1<? extends Citizen, _1> Rebel(API.Match.Pattern<_1, ?> p1) {
        return API.Match.Pattern1.of(Rebel.class, p1, CitizenPatterns::Rebel);
    }

    public static Tuple1<String> Sith(Sith sith) {
        return Tuple.of(sith.name);
    }

    public static <_1 extends String> API.Match.Pattern1<? extends Citizen, _1> Sith(API.Match.Pattern<_1, ?> p1) {
        return API.Match.Pattern1.of(Sith.class, p1, CitizenPatterns::Sith);
    }

    public static Tuple2<String, Boolean> Stormtrooper(Stormtrooper stormtrooper) {
        return Tuple.of(stormtrooper.name, stormtrooper.isCloned);
    }

    public static <_1 extends String, _2 extends Boolean> API.Match.Pattern2<? extends Citizen, _1, _2> Stormtrooper(API.Match.Pattern<_1, ?> p1, API.Match.Pattern<_2, ?> p2) {
        return API.Match.Pattern2.of(Stormtrooper.class, p1, p2, CitizenPatterns::Stormtrooper);
    }
}
